version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jarvistrade_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: jarvistrade_prod
      POSTGRES_USER: jarvistrade_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - jarvistrade_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvistrade_user -d jarvistrade_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jarvistrade_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password_here} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - jarvistrade_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jarvistrade_app
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://jarvistrade_user:${POSTGRES_PASSWORD:-your_secure_password_here}@postgres:5432/jarvistrade_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_redis_password_here}@redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - PAYSTACK_SECRET_KEY=${PAYSTACK_SECRET_KEY}
      - PAYSTACK_PUBLIC_KEY=${PAYSTACK_PUBLIC_KEY}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./licenses:/app/licenses
      - ./digital_products:/app/digital_products
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jarvistrade_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jarvistrade_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - jarvistrade_network

  # Celery Worker (for background tasks)
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jarvistrade_celery
    restart: unless-stopped
    command: celery -A main.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://jarvistrade_user:${POSTGRES_PASSWORD:-your_secure_password_here}@postgres:5432/jarvistrade_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_redis_password_here}@redis:6379/0
      - ENVIRONMENT=production
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jarvistrade_network

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jarvistrade_celery_beat
    restart: unless-stopped
    command: celery -A main.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://jarvistrade_user:${POSTGRES_PASSWORD:-your_secure_password_here}@postgres:5432/jarvistrade_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_redis_password_here}@redis:6379/0
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jarvistrade_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  jarvistrade_network:
    driver: bridge
